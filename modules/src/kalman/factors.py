import numpy as np

def kalman_filter_factor_model(Y, A, H, F_0, P_0, Q, R):
    """
    Реализация факторной модели фильтра Калмана.

    Аргументы:
        Y (ndarray): Наблюдаемые данные (T временных шагов, размерность m).
        A (ndarray): Матрица перехода состояния.
        H (ndarray): Матрица нагрузок факторов.
        F_0 (ndarray): Начальная оценка скрытых факторов.
        P_0 (ndarray): Начальная ковариационная матрица.
        Q (ndarray): Ковариационная матрица шума процесса.
        R (ndarray): Ковариационная матрица шума измерений.

    Возвращает:
        tuple: Оцененные скрытые факторы (F_est) и ковариационные матрицы (P_est).
    """
    T, m = Y.shape  # Количество временных шагов и размерность наблюдений
    k = F_0.shape[0]  # Размерность скрытых факторов

    # Инициализация массивов для оценок факторов и ковариаций
    F_est = np.zeros((T, k))
    P_est = np.zeros((T, k, k))

    # Установка начальных значений
    F_est[0] = F_0
    P_est[0] = P_0

    # Итерация по временным шагам
    for t in range(1, T):
        # Шаг предсказания
        F_pred = A @ F_est[t - 1]
        P_pred = A @ P_est[t - 1] @ A.T + Q

        # Шаг обновления
        K = P_pred @ H.T @ np.linalg.inv(H @ P_pred @ H.T + R)
        F_est[t] = F_pred + K @ (Y[t] - H @ F_pred)
        P_est[t] = (np.eye(k) - K @ H) @ P_pred

    return F_est, P_est

# Пример использования
if __name__ == "__main__":
    # Пример входных данных
    T = 10  # Количество временных шагов
    m = 3   # Размерность наблюдений
    k = 2   # Размерность скрытых факторов

    Y = np.random.rand(T, m)  # Случайные наблюдения
    A = np.eye(k)             # Простая единичная матрица перехода
    H = np.random.rand(m, k)  # Случайные нагрузки факторов
    F_0 = np.zeros(k)         # Начальные оценки факторов
    P_0 = np.eye(k)           # Начальная ковариационная матрица
    Q = np.eye(k) * 0.1       # Ковариация шума процесса
    R = np.eye(m) * 0.1       # Ковариация шума измерений

    # Вычисление факторной модели Калмана
    F_est, P_est = kalman_filter_factor_model(Y, A, H, F_0, P_0, Q, R)

    print("Оцененные скрытые факторы:")
    print(F_est)
    print("Оцененные ковариации:")
    print(P_est)
